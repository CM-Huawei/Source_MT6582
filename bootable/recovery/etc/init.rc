import /init.recovery.${ro.hardware}.rc

on early-init
    start ueventd
    start healthd

on init
    export PATH /sbin
    export ANDROID_ROOT /system
    export ANDROID_DATA /data
    export EXTERNAL_STORAGE /sdcard

    symlink /system/etc /etc

    mkdir /sdcard
    mkdir /system
    mkdir /data
    mkdir /cache
    mount /tmp /tmp tmpfs
    insmod /sec.ko
    mknod /dev/sec c 182 0
    chmod 0660 /dev/sec

    chown root shell /tmp
    chmod 0775 /tmp
    
    write /sys/class/android_usb/android0/enable 0
    write /sys/class/android_usb/android0/idVendor 0BB4
    write /sys/class/android_usb/android0/idProduct 0c01
    write /sys/class/android_usb/android0/functions adb

    #write /sys/class/android_usb/android0/enable 0
    #write /sys/class/android_usb/android0/idVendor 18D1
    #write /sys/class/android_usb/android0/idProduct D001
    #write /sys/class/android_usb/android0/functions adb
    #write /sys/class/android_usb/android0/iManufacturer ${ro.product.manufacturer}
    #write /sys/class/android_usb/android0/iProduct ${ro.product.model}
    #write /sys/class/android_usb/android0/iSerial ${ro.serialno}


on boot

    ifup lo
    hostname localhost
    domainname localdomain

    class_start default

on property:sys.powerctl=*
   powerctl ${sys.powerctl}

service ueventd /sbin/ueventd
    critical

service healthd /sbin/healthd -n
    critical

service recovery /sbin/recovery

service adbd /sbin/adbd recovery
    disabled
    socket adbd stream 660 system system

# Always start adbd on userdebug and eng builds
on property:ro.debuggable=1
    write /sys/class/android_usb/android0/enable 1
    start adbd

# Restart adbd so it can run as root
on property:service.adb.root=1
    write /sys/class/android_usb/android0/enable 0
    restart adbd
    write /sys/class/android_usb/android0/enable 1
