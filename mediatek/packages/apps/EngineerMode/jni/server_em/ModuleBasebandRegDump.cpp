/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 *
 * MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */


/* DO NOT EDIT THIS FILE - it is machine generated */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <errno.h>
#include <fcntl.h>
#include <sys/mman.h>
#include "ModuleBasebandRegDump.h"
#include "RPCClient.h"
#include <cutils/xlog.h>
#include <chip_support.h>
#define LOG_TAG "BASE"

long em_svr_mod_base_band_get_reg_base() {
    int chipid = em_jni_get_chip_id();
    if (chipid == MTK_6573_SUPPORT) {
        return (0x70000000);
    } else if (chipid == MTK_6516_SUPPORT) {
        return (0x80000000);
    } else if (chipid == MTK_6575_SUPPORT) {
        return (0xC0000000);
    } else if (chipid == MTK_6577_SUPPORT) {
        return (0xC0000000);
    } else {
        return (0x70000000);
    }
}

int ModuleBaseband::BaseBandStart()
{
	B = MAP_FAILED;	
	fd = open(MEM_DEV_PATH, O_RDWR);
	if (fd < 0) {
		return errno;
	}
	if(0)
		return 0;
	
	B = mmap(NULL, MAP_LEN, PROT_READ | PROT_WRITE, MAP_SHARED, fd, REG_BASE);
	if (B == MAP_FAILED) {
		return errno;
	}
	return 0;
}
int ModuleBaseband::BaseBandEnd()
{
	if(B != MAP_FAILED)		
		munmap(B, MAP_LEN);
	if(fd >= 0)		
		close(fd);
	return 0;
}

char* ModuleBaseband::BaseBandRead(int base, int len)
{
	if(B == MAP_FAILED)
		return (char*)0;
	unsigned int addr = (unsigned int)base;
	unsigned int value = 0;
	
	char* R = (char*)malloc(24*1024);
	if(R == 0)
	{		
		return 0;
	}
	memset(R, 0, 24*1024);
	//char R[25*1024]={0};
	char S[32]={0};
	int i=0;
	for(i=0; i<len; i+=sizeof(int))
	{
		READ_REG_DATA(addr,value);
		sprintf(S,"0x%X [0x%X]\n", addr, value);	
		strcat(R,S);
		//printf("read : %x %d %x %d\n", addr, len, value, i);
		addr += sizeof(int);
	}
	
	return R;
}

char* ModuleBaseband::BaseBandWrite(int base, int len, int val)
{
	if(B == MAP_FAILED)
		return (char*)0;
	unsigned int addr = (unsigned int)base;
	unsigned int value = (unsigned int)val;
	
	int i=0;
	for(i=0; i<len; i+=sizeof(int))
	{
		WRITE_REG_DATA(addr,value);
		addr += sizeof(int);
		//printf("write : %x %d %x %d\n", addr, len, value, i);
	}
	return BaseBandRead(base, len);
}

int ModuleBaseband::fd = -1;
void* ModuleBaseband::B = MAP_FAILED;

int ModuleBaseband::BasebandEntry(RPCClient* msgSender)
{
	fd = -1;
	B = MAP_FAILED;

	char info[1024];
			
	char c = 0;	
	unsigned int addr = 0;	
	unsigned int len = 0;
	unsigned int value = 0;

	
	int paraNum = msgSender->ReadInt();		
	if(4 != paraNum)
	{	sprintf(info, "Two usages:\n" 
			" w F010101F 10 FFFF\n"
			" r F010101F 10 0 \n"
			);

		msgSender->PostMsg(info);		
		return -1;
	}
	int idx = 0;
	for(idx=0; idx<paraNum; idx++)
	{
		int T = msgSender->ReadInt();
		if(T != PARAM_TYPE_STRING)
		{
			//error
			return -1;
		}
		int L = msgSender->ReadInt();
		
		char* buf = new char[L+1];
		
		buf[L] = 0;
		L = msgSender->Receive(buf, L);
		printf("receive package len %d\n", L);
		if(L == -1)
			return -1;
		
		switch(idx)
		{
		case 0:
			c = buf[0];
			break;
		case 1:
			addr = (unsigned int)strtoul(buf, 0, 16);
			XLOGD("buf is %s, addr = %d", buf, addr);
	
			if(addr % 4 != 0)
			{
				addr -= (addr % 4);
			}
			break;
		case 2:
			len = (int)strtol(buf, 0, 10);
			break;
		case 3:
			value = (int)strtol(buf, 0, 16);
			break;
		default:
			break;
		}
		
		delete [] buf;
		
	}
	
	if(addr <(unsigned int)REG_BASE )
	{	
		sprintf(info, "Address must bigger than 0x%x\n", REG_BASE);
		msgSender->PostMsg(info);
		return 0;	
	}
	if(addr-(unsigned int)REG_BASE >= MAP_LEN)
	{
		sprintf(info, "Address must less than 0x%x\n", REG_BASE+MAP_LEN);
		msgSender->PostMsg(info);
		return 0;	
	}
	
	if(0 != BaseBandStart())
	{
		sprintf(info, "Mapping Error!\n");
		msgSender->PostMsg(info);
		return 1;
	}
	
	
	char* R = 0;
	if (c == 'r') {		
		R = BaseBandRead(addr, len);
	}
	else if (c == 'w') {
		R = BaseBandWrite(addr, len, value);
	}	
	
	if(0 == R)
	{
		sprintf(info, "R/W Error!\n");
		msgSender->PostMsg(info);
		return 1;
	}
	BaseBandEnd();
	
	//printf("%s\n", R);
	msgSender->PostMsg(R);
	if(R!=0)
		free(R);
	return 0;
}
